/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Click
 * 
 * –ó–∞–ø—É—Å–∫: ts-node tests/simulate-click-notify.ts <orderId>
 * 
 * –ü—Ä–∏–º–µ—Ä: ts-node tests/simulate-click-notify.ts test-1741964994536
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
import dotenv from 'dotenv';
dotenv.config();

import fetch from 'node-fetch';
import crypto from 'crypto';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ API
interface ClickNotifyResponse {
  error: number;
  error_note?: string;
  click_trans_id?: string;
  merchant_trans_id?: string;
  merchant_prepare_id?: string;
  merchant_confirm_id?: string;
}

interface StatusResponse {
  success: boolean;
  error?: string;
  order?: {
    status: string;
    [key: string]: any;
  };
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –∑–∞–∫–∞–∑–∞
const orderId = process.argv[2];
if (!orderId) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ts-node tests/simulate-click-notify.ts <orderId>');
  process.exit(1);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  baseUrl: process.env.TEST_BASE_URL || 'http://localhost:3000',
  click: {
    serviceId: process.env.CLICK_SERVICE_ID || 'test_service_id',
    merchantId: process.env.CLICK_MERCHANT_ID || 'test_merchant_id',
    merchantUserId: process.env.CLICK_MERCHANT_USER_ID || 'test_merchant_user_id',
    secretKey: process.env.CLICK_SECRET_KEY || 'test_secret_key'
  },
  testAmount: '10000'
};

/**
 * –°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click
 */
async function simulatePrepareRequest() {
  console.log('üîç –°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click...');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const clickTransId = Date.now().toString();
    const signTime = Math.floor(Date.now() / 1000).toString();
    const amount = config.testAmount;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Click
    const signString = `${clickTransId}${config.click.serviceId}${orderId}${amount}0${signTime}${config.click.secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody = {
      click_trans_id: clickTransId,
      service_id: config.click.serviceId,
      merchant_trans_id: orderId,
      amount: amount,
      action: 0, // Prepare
      error: 0,
      sign_time: signTime,
      sign_string: sign
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Prepare –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', JSON.stringify(requestBody, null, 2));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`${config.baseUrl}/api/click/notify`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    const data = await response.json() as ClickNotifyResponse;
    
    console.log('üì• –û—Ç–≤–µ—Ç –Ω–∞ Prepare –∑–∞–ø—Ä–æ—Å:', JSON.stringify(data, null, 2));
    
    if (data.error === 0) {
      console.log('‚úÖ Prepare –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      return { success: true, clickTransId: clickTransId };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Prepare –∑–∞–ø—Ä–æ—Å–∞:', data.error_note || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return { success: false };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Prepare –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { success: false };
  }
}

/**
 * –°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click
 */
async function simulateCompleteRequest(clickTransId: string) {
  console.log('\nüîç –°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click...');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const signTime = Math.floor(Date.now() / 1000).toString();
    const amount = config.testAmount;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Click
    const signString = `${clickTransId}${config.click.serviceId}${orderId}${amount}1${signTime}${config.click.secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody = {
      click_trans_id: clickTransId,
      service_id: config.click.serviceId,
      merchant_trans_id: orderId,
      amount: amount,
      action: 1, // Complete
      error: 0,
      sign_time: signTime,
      sign_string: sign
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Complete –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', JSON.stringify(requestBody, null, 2));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`${config.baseUrl}/api/click/notify`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    const data = await response.json() as ClickNotifyResponse;
    
    console.log('üì• –û—Ç–≤–µ—Ç –Ω–∞ Complete –∑–∞–ø—Ä–æ—Å:', JSON.stringify(data, null, 2));
    
    if (data.error === 0) {
      console.log('‚úÖ Complete –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      return { success: true };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Complete –∑–∞–ø—Ä–æ—Å–∞:', data.error_note || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return { success: false };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Complete –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { success: false };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function checkOrderStatus() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞...');
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
    const response = await fetch(`${config.baseUrl}/payment/status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        orderId: orderId
      }),
    });
    
    const data = await response.json() as StatusResponse;
    
    console.log('üì• –û—Ç–≤–µ—Ç API —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', JSON.stringify(data, null, 2));
    
    if (data.success) {
      if (data.order && data.order.status === 'PAID') {
        console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω');
      } else {
        console.log(`‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${data.order?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', data.error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runSimulation() {
  console.log('=== üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Click ===');
  console.log(`üìù ID –∑–∞–∫–∞–∑–∞: ${orderId}`);
  
  // –®–∞–≥ 1: Prepare
  const prepareResult = await simulatePrepareRequest();
  if (!prepareResult.success) {
    console.error('‚ùå –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ Prepare');
    return;
  }
  
  // –®–∞–≥ 2: Complete
  const completeResult = await simulateCompleteRequest(prepareResult.clickTransId!);
  if (!completeResult.success) {
    console.error('‚ùå –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ Complete');
    return;
  }
  
  // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (2 —Å–µ–∫—É–Ω–¥—ã)...');
  await new Promise(resolve => setTimeout(resolve, 2000));
  await checkOrderStatus();
  
  console.log('\n=== üéâ –°–∏–º—É–ª—è—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Click –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
runSimulation().catch(console.error); 