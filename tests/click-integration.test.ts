/**
 * –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Click Payment System
 * 
 * –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π Click:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 * 2. –°–∏–º—É–ª—è—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Click
 * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
import dotenv from 'dotenv';
dotenv.config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import fetch from 'node-fetch';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';
import { promisify } from 'util';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ API
interface CreatePaymentResponse {
  success: boolean;
  redirectUrl?: string;
  orderId?: string;
  error?: string;
}

interface ClickNotifyResponse {
  error: number;
  error_note?: string;
  click_trans_id?: string;
  merchant_trans_id?: string;
  merchant_prepare_id?: string;
  merchant_confirm_id?: string;
}

interface StatusByOrderIdResponse {
  success: boolean;
  error?: string;
  order?: {
    orderId: string;
    transactionId?: string;
    status: string;
    statusDescription: string;
    paidAt?: string;
    tourName: string;
    price: string;
    customer: {
      name?: string;
      phone?: string;
    }
  };
}

interface StatusByTransactionIdResponse {
  success: boolean;
  error?: string;
  transaction?: {
    transactionId: string;
    merchantTransId: string;
    status: string;
    statusDescription: string;
    amount: string;
    paymentStatus: number;
    createdTime?: string;
    payTime?: string;
  };
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const config = {
  // –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  baseUrl: process.env.TEST_BASE_URL || 'http://localhost:3000',
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
  testOrder: {
    tourId: 'test-tour-1',
    tourName: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä',
    price: '10000',
    userName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    userPhone: '+998901234567'
  },
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã Click (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)
  click: {
    serviceId: process.env.CLICK_SERVICE_ID || 'test_service_id',
    merchantId: process.env.CLICK_MERCHANT_ID || 'test_merchant_id',
    merchantUserId: process.env.CLICK_MERCHANT_USER_ID || 'test_merchant_user_id',
    secretKey: process.env.CLICK_SECRET_KEY || 'test_secret_key'
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
const readFile = promisify(fs.readFile);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
let testResults: { [key: string]: any } = {};

/**
 * –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 * 
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
 */
async function testCreatePayment() {
  console.log('\nüîç –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞');
  
  try {
    const response = await fetch(`${config.baseUrl}/api/click`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(config.testOrder),
    });
    
    const data = await response.json() as CreatePaymentResponse;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (!data.success) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${data.error}`);
    }
    
    if (!data.redirectUrl || !data.redirectUrl.includes('click.uz/services/pay')) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    if (!data.orderId) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º orderId –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö
    testResults.orderId = data.orderId;
    testResults.redirectUrl = data.redirectUrl;
    
    console.log('‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–π–¥–µ–Ω');
    console.log(`üìù ID –∑–∞–∫–∞–∑–∞: ${data.orderId}`);
    console.log(`üîó URL –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${data.redirectUrl}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click
 * 
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç prepare-–∑–∞–ø—Ä–æ—Å –æ—Ç Click –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
 */
async function testPrepareRequest() {
  console.log('\nüîç –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click');
  
  if (!testResults.orderId) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞–∫–∞–∑–∞');
    return false;
  }
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const clickTransId = Date.now().toString();
    const signTime = Math.floor(Date.now() / 1000).toString();
    const amount = config.testOrder.price;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Click
    const signString = `${clickTransId}${config.click.serviceId}${testResults.orderId}${amount}0${signTime}${config.click.secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody = {
      click_trans_id: clickTransId,
      service_id: config.click.serviceId,
      merchant_trans_id: testResults.orderId,
      amount: amount,
      action: 0, // Prepare
      error: 0,
      sign_time: signTime,
      sign_string: sign
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`${config.baseUrl}/api/click/notify`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    const data = await response.json() as ClickNotifyResponse;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (data.error !== 0) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ prepare-–∑–∞–ø—Ä–æ—Å: ${data.error_note || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    
    if (data.merchant_trans_id !== testResults.orderId) {
      throw new Error('ID –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    testResults.clickTransId = clickTransId;
    
    console.log('‚úÖ –¢–µ—Å—Ç Prepare –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω');
    console.log(`üìù Click Trans ID: ${clickTransId}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç Prepare –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click
 * 
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç complete-–∑–∞–ø—Ä–æ—Å –æ—Ç Click –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
 */
async function testCompleteRequest() {
  console.log('\nüîç –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click');
  
  if (!testResults.orderId || !testResults.clickTransId) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return false;
  }
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const signTime = Math.floor(Date.now() / 1000).toString();
    const amount = config.testOrder.price;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Click
    const signString = `${testResults.clickTransId}${config.click.serviceId}${testResults.orderId}${amount}1${signTime}${config.click.secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody = {
      click_trans_id: testResults.clickTransId,
      service_id: config.click.serviceId,
      merchant_trans_id: testResults.orderId,
      amount: amount,
      action: 1, // Complete
      error: 0,
      sign_time: signTime,
      sign_string: sign
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`${config.baseUrl}/api/click/notify`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    const data = await response.json() as ClickNotifyResponse;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (data.error !== 0) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ complete-–∑–∞–ø—Ä–æ—Å: ${data.error_note || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    
    if (data.merchant_confirm_id !== testResults.orderId) {
      throw new Error('ID –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç Complete –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞...');
    await sleep(2000);
    
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç Complete –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
 */
async function testCheckStatusByOrderId() {
  console.log('\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞');
  
  if (!testResults.orderId) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞–∫–∞–∑–∞');
    return false;
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
    const response = await fetch(`${config.baseUrl}/payment/status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        orderId: testResults.orderId
      }),
    });
    
    const data = await response.json() as StatusByOrderIdResponse;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (!data.success) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: ${data.error}`);
    }
    
    if (!data.order) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ –æ—Ç–≤–µ—Ç–µ');
    }
    
    if (data.order.status !== 'PAID') {
      console.warn(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${data.order.status}, –æ–∂–∏–¥–∞–ª–æ—Å—å: PAID`);
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–π–¥–µ–Ω');
    console.log(`üìù –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${data.order.status}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Click
 */
async function testCheckStatusByTransactionId() {
  console.log('\nüîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  
  if (!testResults.clickTransId) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    return false;
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
    const response = await fetch(`${config.baseUrl}/payment/status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        transactionId: testResults.clickTransId
      }),
    });
    
    const data = await response.json() as StatusByTransactionIdResponse;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (!data.success) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: ${data.error}`);
    }
    
    if (!data.transaction) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω');
    console.log(`üìù –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${data.transaction.status}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ Click –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç—É—Å–∞ –ø–æ API
    console.log('‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, API Click –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
async function testOrderFileUpdated() {
  console.log('\nüîç –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞');
  
  if (!testResults.orderId) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞–∫–∞–∑–∞');
    return false;
  }
  
  try {
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–∫–∞–∑–∞
    const orderFilePath = path.join(process.cwd(), 'data', 'orders', `${testResults.orderId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if (!fs.existsSync(orderFilePath)) {
      throw new Error(`–§–∞–π–ª –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${orderFilePath}`);
    }
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const orderData = JSON.parse(await readFile(orderFilePath, 'utf8'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    if (!orderData.clickTransId) {
      throw new Error('–ü–æ–ª–µ clickTransId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ –∑–∞–∫–∞–∑–∞');
    }
    
    if (!orderData.paidAt) {
      throw new Error('–ü–æ–ª–µ paidAt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ –∑–∞–∫–∞–∑–∞');
    }
    
    if (orderData.status !== '–û–ø–ª–∞—á–µ–Ω') {
      console.warn(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª–µ: ${orderData.status}, –æ–∂–∏–¥–∞–ª–æ—Å—å: –û–ø–ª–∞—á–µ–Ω`);
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–π–¥–µ–Ω');
    console.log(`üìù –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª–µ: ${orderData.status}`);
    console.log(`üìù ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: ${orderData.clickTransId}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –∑–∞–∫–∞–∑–∞
 */
async function testInvalidOrderId() {
  console.log('\nüîç –¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∑–∞–∫–∞–∑–∞
    const invalidOrderId = 'non-existent-' + Date.now();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
    const response = await fetch(`${config.baseUrl}/payment/status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        orderId: invalidOrderId
      }),
    });
    
    const data = await response.json() as StatusByOrderIdResponse;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (data.success) {
      throw new Error('–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
    }
    
    if (response.status !== 404) {
      console.warn(`‚ö†Ô∏è HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}, –æ–∂–∏–¥–∞–ª–æ—Å—å: 404`);
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–π–¥–µ–Ω');
    
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runAllTests() {
  console.log('=== üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Click ===');
  
  const tests = [
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞', fn: testCreatePayment },
    { name: '–°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞', fn: testPrepareRequest },
    { name: '–°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞', fn: testCompleteRequest },
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞', fn: testCheckStatusByOrderId },
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', fn: testCheckStatusByTransactionId },
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞', fn: testOrderFileUpdated },
    { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞', fn: testInvalidOrderId }
  ];
  
  const results = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  for (const test of tests) {
    console.log(`\n=== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: ${test.name} ===`);
    const success = await test.fn();
    results.push({ name: test.name, success });
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\n=== üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ ===');
  const totalTests = results.length;
  const passedTests = results.filter(r => r.success).length;
  
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
  
  for (const result of results) {
    console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${result.name}`);
  }
  
  return passedTests === totalTests;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllTests().then(success => {
    process.exit(success ? 0 : 1);
  });
}

export {
  runAllTests,
  testCreatePayment,
  testPrepareRequest,
  testCompleteRequest,
  testCheckStatusByOrderId,
  testCheckStatusByTransactionId,
  testOrderFileUpdated,
  testInvalidOrderId
}; 