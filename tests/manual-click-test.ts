/**
 * –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Click
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Click –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 * 
 * –ó–∞–ø—É—Å–∫: ts-node tests/manual-click-test.ts
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
import dotenv from 'dotenv';
dotenv.config();

import crypto from 'crypto';
import { v4 as uuidv4 } from 'uuid';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function checkEnvironment() {
  console.log('=== üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===\n');
  
  const requiredVars = [
    'CLICK_SERVICE_ID',
    'CLICK_MERCHANT_ID',
    'CLICK_MERCHANT_USER_ID',
    'CLICK_SECRET_KEY'
  ];
  
  let allPresent = true;
  
  for (const envVar of requiredVars) {
    const isPresent = !!process.env[envVar];
    console.log(`${isPresent ? '‚úÖ' : '‚ùå'} ${envVar}: ${isPresent ? process.env[envVar] : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    
    if (!isPresent) {
      allPresent = false;
    }
  }
  
  console.log(`\n${allPresent ? '‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' : '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
  return allPresent;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
function generatePaymentUrl() {
  console.log('\n=== üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã ===\n');
  
  const serviceId = process.env.CLICK_SERVICE_ID;
  const merchantId = process.env.CLICK_MERCHANT_ID;
  const secretKey = process.env.CLICK_SECRET_KEY;
  
  if (!serviceId || !merchantId || !secretKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return null;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
  const orderId = `test-${Date.now()}`;
  const amount = 1000; // 1000 —Å—É–º
  const returnUrl = 'https://hadiya.uz/payment/success';
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const signTime = Date.now();
  const signString = `${serviceId}${orderId}${signTime}${secretKey}`;
  const sign = crypto.createHash('md5').update(signString).digest('hex');
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É Click
  const clickUrl = `https://my.click.uz/services/pay?service_id=${serviceId}&merchant_id=${merchantId}&amount=${amount}&transaction_param=${orderId}&return_url=${encodeURIComponent(returnUrl)}&sign_time=${signTime}&sign_string=${sign}`;
  
  console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:');
  console.log(`- ID –∑–∞–∫–∞–∑–∞: ${orderId}`);
  console.log(`- –°—É–º–º–∞: ${amount} —Å—É–º`);
  console.log(`- –í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∏: ${signTime}`);
  console.log(`- –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∏: ${signString}`);
  console.log(`- –ü–æ–¥–ø–∏—Å—å MD5: ${sign}`);
  
  console.log('\nüåê URL –¥–ª—è –æ–ø–ª–∞—Ç—ã:');
  console.log(clickUrl);
  
  return {
    orderId,
    paymentUrl: clickUrl,
    amount,
    signTime,
    sign
  };
}

// –°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click
function simulatePrepareRequest(orderId: string) {
  console.log('\n=== üîÑ –°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞ ===\n');
  
  const serviceId = process.env.CLICK_SERVICE_ID;
  const secretKey = process.env.CLICK_SECRET_KEY;
  
  if (!serviceId || !secretKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return null;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
  const clickTransId = Date.now().toString();
  const signTime = Math.floor(Date.now() / 1000).toString();
  const amount = '1000';
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Click
  const signString = `${clickTransId}${serviceId}${orderId}${amount}0${signTime}${secretKey}`;
  const sign = crypto.createHash('md5').update(signString).digest('hex');
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  const requestBody = {
    click_trans_id: clickTransId,
    service_id: serviceId,
    merchant_trans_id: orderId,
    amount: amount,
    action: 0, // Prepare
    error: 0,
    sign_time: signTime,
    sign_string: sign
  };
  
  console.log('üìù –î–∞–Ω–Ω—ã–µ Prepare –∑–∞–ø—Ä–æ—Å–∞:');
  console.log(JSON.stringify(requestBody, null, 2));
  
  return {
    clickTransId,
    requestBody
  };
}

// –°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click
function simulateCompleteRequest(orderId: string, clickTransId: string) {
  console.log('\n=== üîÑ –°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞ ===\n');
  
  const serviceId = process.env.CLICK_SERVICE_ID;
  const secretKey = process.env.CLICK_SECRET_KEY;
  
  if (!serviceId || !secretKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return null;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
  const signTime = Math.floor(Date.now() / 1000).toString();
  const amount = '1000';
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Click
  const signString = `${clickTransId}${serviceId}${orderId}${amount}1${signTime}${secretKey}`;
  const sign = crypto.createHash('md5').update(signString).digest('hex');
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  const requestBody = {
    click_trans_id: clickTransId,
    service_id: serviceId,
    merchant_trans_id: orderId,
    amount: amount,
    action: 1, // Complete
    error: 0,
    sign_time: signTime,
    sign_string: sign
  };
  
  console.log('üìù –î–∞–Ω–Ω—ã–µ Complete –∑–∞–ø—Ä–æ—Å–∞:');
  console.log(JSON.stringify(requestBody, null, 2));
  
  return {
    requestBody
  };
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log('=== üß™ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Click ===\n');
  
  // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envOk = checkEnvironment();
  if (!envOk) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }
  
  // –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
  const paymentData = generatePaymentUrl();
  if (!paymentData) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL');
    return;
  }
  
  // –®–∞–≥ 3: –°–∏–º—É–ª—è—Ü–∏—è Prepare –∑–∞–ø—Ä–æ—Å–∞
  const prepareData = simulatePrepareRequest(paymentData.orderId);
  if (!prepareData) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ Prepare –∑–∞–ø—Ä–æ—Å–∞');
    return;
  }
  
  // –®–∞–≥ 4: –°–∏–º—É–ª—è—Ü–∏—è Complete –∑–∞–ø—Ä–æ—Å–∞
  const completeData = simulateCompleteRequest(paymentData.orderId, prepareData.clickTransId);
  if (!completeData) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ Complete –∑–∞–ø—Ä–æ—Å–∞');
    return;
  }
  
  console.log('\n=== ‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===');
  console.log('–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error); 