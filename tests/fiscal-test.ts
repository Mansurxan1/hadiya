/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ Click
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ Click API
 * 
 * –ó–∞–ø—É—Å–∫: ts-node tests/fiscal-test.ts
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
import dotenv from 'dotenv';
dotenv.config();

import crypto from 'crypto';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞
interface FiscalItemCommissionInfo {
  TIN?: string;  // –ò–ù–ù
  PINFL?: string; // –ü–ò–ù–§–õ
}

interface FiscalItem {
  Name: string;           // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  Barcode?: string;       // –®—Ç—Ä–∏—Ö-–∫–æ–¥
  Labels?: string[];      // –ú–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ (–º–∞–∫—Å. 300 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
  SPIC: string;           // –ö–æ–¥ –°–ü–ò–ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  Units?: number;         // –ö–æ–¥ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
  PackageCode: string;    // –ö–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  GoodPrice?: number;     // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏
  Price: number;          // –û–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–∞, –≤–∫–ª—é—á–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫–ª—é—á–∞—è —Å–∫–∏–¥–∫–∏ (–≤ —Ç–∏–π–∏–Ω–∞—Ö) (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  Amount: number;         // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  VAT: number;            // –°—É–º–º–∞ –ù–î–° (–≤ —Ç–∏–π–∏–Ω–∞—Ö) (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  VATPercent: number;     // –ü—Ä–æ—Ü–µ–Ω—Ç –ù–î–° (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  Discount?: number;      // –°–∫–∏–¥–∫–∞
  Other?: number;         // –î—Ä—É–≥–∏–µ —Å–∫–∏–¥–∫–∏
  CommissionInfo: FiscalItemCommissionInfo; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω–æ–º —á–µ–∫–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function checkFiscalEnvironment() {
  console.log('=== üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ===\n');
  
  const requiredVars = [
    'CLICK_SERVICE_ID',
    'CLICK_MERCHANT_ID',
    'CLICK_MERCHANT_USER_ID',
    'CLICK_SECRET_KEY',
    'CLICK_SPIC_CODE',
    'CLICK_PACKAGE_CODE'
  ];
  
  let allPresent = true;
  
  for (const envVar of requiredVars) {
    const isPresent = !!process.env[envVar];
    console.log(`${isPresent ? '‚úÖ' : '‚ùå'} ${envVar}: ${isPresent ? process.env[envVar] : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    
    if (!isPresent) {
      allPresent = false;
    }
  }
  
  console.log(`\n${allPresent ? '‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' : '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
  return allPresent;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
async function testFiscalizeItems() {
  console.log('\n=== üßæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ ===\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ—Ç ID –±—ã–ª –±—ã –ø–æ–ª—É—á–µ–Ω –æ—Ç Click)
    const paymentId = `test_${Date.now()}`;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    const items: FiscalItem[] = [
      {
        Name: '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —É—Å–ª—É–≥–∞',
        SPIC: process.env.CLICK_SPIC_CODE!,
        PackageCode: process.env.CLICK_PACKAGE_CODE!,
        Price: 100000, // 1000 —Å—É–º –≤ —Ç–∏–π–∏–Ω–∞—Ö
        Amount: 1,
        VAT: 0, // –ë–µ–∑ –ù–î–°
        VATPercent: 0,
        CommissionInfo: {
          TIN: '123456789' // –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù
        }
      }
    ];
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏:');
    console.log(JSON.stringify(items, null, 2));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const fiscalParams = {
      service_id: process.env.CLICK_SERVICE_ID!,
      payment_id: paymentId,
      items: items,
      received_card: 100000 // –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
    };
    
    console.log('\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—é...');
    console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
    console.log(JSON.stringify(fiscalParams, null, 2));
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API Click
    // –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const fiscalResponse = {
      error_code: 0,
      error_note: 'Success'
    };
    
    console.log('\nüì¨ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏:');
    console.log(JSON.stringify(fiscalResponse, null, 2));
    
    if (fiscalResponse.error_code === 0) {
      console.log('\n‚úÖ –§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    } else {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏: ${fiscalResponse.error_note}`);
    }
    
    return { success: fiscalResponse.error_code === 0, paymentId };
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return { success: false, paymentId: null };
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function testGetFiscalData(paymentId: string) {
  console.log('\n=== üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===\n');
  
  try {
    const serviceId = process.env.CLICK_SERVICE_ID!;
    
    console.log(`üìù –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);
    console.log(`üìù Service ID: ${serviceId}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º Auth –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const merchantUserId = process.env.CLICK_MERCHANT_USER_ID!;
    const secretKey = process.env.CLICK_SECRET_KEY!;
    const timestamp = Math.floor(Date.now() / 1000).toString();
    const signString = `${timestamp}${secretKey}`;
    const sign = crypto.createHash('sha1').update(signString).digest('hex');
    const authHeader = `${merchantUserId}:${sign}:${timestamp}`;
    
    console.log(`üìù Auth Header: ${authHeader}`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API Click
    // –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const fiscalDataResponse = {
      paymentId,
      qrCodeURL: `https://ofd.soliq.uz/epi?t=EZ000000000030&r=123456789&c=${Date.now()}&s=${Math.floor(Math.random() * 1000000000000)}`
    };
    
    console.log('\nüì¨ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(JSON.stringify(fiscalDataResponse, null, 2));
    
    console.log('\nüîó URL QR-–∫–æ–¥–∞ —á–µ–∫–∞:');
    console.log(fiscalDataResponse.qrCodeURL);
    
    return { success: true, qrCodeURL: fiscalDataResponse.qrCodeURL };
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return { success: false, qrCodeURL: null };
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
async function testRegisterQRCode(qrCodeURL: string) {
  console.log('\n=== üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —á–µ–∫–∞ ===\n');
  
  try {
    const paymentId = `test_${Date.now()}`;
    
    console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);
    console.log(`üîó URL QR-–∫–æ–¥–∞: ${qrCodeURL}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const registerParams = {
      service_id: process.env.CLICK_SERVICE_ID!,
      payment_id: paymentId,
      qrcode: qrCodeURL
    };
    
    console.log('\nüìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
    console.log(JSON.stringify(registerParams, null, 2));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º Auth –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const merchantUserId = process.env.CLICK_MERCHANT_USER_ID!;
    const secretKey = process.env.CLICK_SECRET_KEY!;
    const timestamp = Math.floor(Date.now() / 1000).toString();
    const signString = `${timestamp}${secretKey}`;
    const sign = crypto.createHash('sha1').update(signString).digest('hex');
    const authHeader = `${merchantUserId}:${sign}:${timestamp}`;
    
    console.log(`üìù Auth Header: ${authHeader}`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API Click
    // –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const registerResponse = {
      error_code: 0,
      error_note: 'Success'
    };
    
    console.log('\nüì¨ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:');
    console.log(JSON.stringify(registerResponse, null, 2));
    
    if (registerResponse.error_code === 0) {
      console.log('\n‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: ${registerResponse.error_note}`);
    }
    
    return { success: registerResponse.error_code === 0 };
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
    return { success: false };
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runFiscalTests() {
  console.log('=== üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ Click ===\n');
  
  // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envOk = checkFiscalEnvironment();
  if (!envOk) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }
  
  // –®–∞–≥ 2: –¢–µ—Å—Ç —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
  const fiscalizeResult = await testFiscalizeItems();
  if (!fiscalizeResult.success || !fiscalizeResult.paymentId) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    return;
  }
  
  // –®–∞–≥ 3: –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const fiscalDataResult = await testGetFiscalData(fiscalizeResult.paymentId);
  if (!fiscalDataResult.success || !fiscalDataResult.qrCodeURL) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    return;
  }
  
  // –®–∞–≥ 4: –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
  const registerResult = await testRegisterQRCode(fiscalDataResult.qrCodeURL);
  if (!registerResult.success) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
    return;
  }
  
  console.log('\n=== ‚úÖ –¢–µ—Å—Ç—ã —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===');
  console.log('–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runFiscalTests().catch(console.error); 